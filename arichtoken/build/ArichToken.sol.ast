PragmaDirective
   Source: "pragma solidity ^0.4.20;"
ContractDefinition "ArichToken"
   Source: "contract ArichToken {\n    mapping (address => uint256) public balanceOf;\n    address public owner;\n    \n    /* Mapping for ALL balances */\n    function ArichToken(uint256 initialSupply) public {\n        owner = msg.sender;\n        balanceOf[msg.sender] = initialSupply; // Give owner all initial tokens\n    }\n    \n    /* Transfer tokens from one account to another */\n    function transfer(address _to, uint256 _value) public returns(bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        return true;\n    }\n    \n    /* Add more tokens  */\n    function addTokens(uint256 _value) public returns(bool success) {\n        require(msg.sender == owner);\n        require(_value < 100); // Not more than 100 Tokens \n        balanceOf[owner] += _value;\n        return true;\n    }\n    \n    /* Remove more tokens  */\n    function removeTokens(uint256 _value) public returns(bool success) {\n        require(msg.sender == owner);\n        require(_value < 100); // Not more than 100 Tokens \n        balanceOf[owner] -= _value;\n        return true;\n    }\n    \n    /* Kill Smart Contract*/\n    function kill() { if (msg.sender == owner) selfdestruct(owner); }\n}"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Source: "mapping (address => uint256) public balanceOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "owner"
     Type: address
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "ArichToken" - public
     Source: "function ArichToken(uint256 initialSupply) public {\n        owner = msg.sender;\n        balanceOf[msg.sender] = initialSupply; // Give owner all initial tokens\n    }"
    ParameterList
       Source: "(uint256 initialSupply)"
      VariableDeclaration "initialSupply"
         Type: uint256
         Source: "uint256 initialSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        owner = msg.sender;\n        balanceOf[msg.sender] = initialSupply; // Give owner all initial tokens\n    }"
      ExpressionStatement
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Source: "balanceOf[msg.sender] = initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[msg.sender] = initialSupply"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier initialSupply
             Type: uint256
             Source: "initialSupply"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) public returns(bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        return true;\n    }"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        return true;\n    }"
      ExpressionStatement
         Source: "require(balanceOf[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_to] + _value >= balanceOf[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balanceOf[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "addTokens" - public
     Source: "function addTokens(uint256 _value) public returns(bool success) {\n        require(msg.sender == owner);\n        require(_value < 100); // Not more than 100 Tokens \n        balanceOf[owner] += _value;\n        return true;\n    }"
    ParameterList
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(msg.sender == owner);\n        require(_value < 100); // Not more than 100 Tokens \n        balanceOf[owner] += _value;\n        return true;\n    }"
      ExpressionStatement
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Source: "require(_value < 100)"
        FunctionCall
           Type: tuple()
           Source: "require(_value < 100)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <
             Type: bool
             Source: "_value < 100"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
      ExpressionStatement
         Source: "balanceOf[owner] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[owner] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[owner]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier owner
               Type: address
               Source: "owner"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "removeTokens" - public
     Source: "function removeTokens(uint256 _value) public returns(bool success) {\n        require(msg.sender == owner);\n        require(_value < 100); // Not more than 100 Tokens \n        balanceOf[owner] -= _value;\n        return true;\n    }"
    ParameterList
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(msg.sender == owner);\n        require(_value < 100); // Not more than 100 Tokens \n        balanceOf[owner] -= _value;\n        return true;\n    }"
      ExpressionStatement
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Source: "require(_value < 100)"
        FunctionCall
           Type: tuple()
           Source: "require(_value < 100)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <
             Type: bool
             Source: "_value < 100"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
      ExpressionStatement
         Source: "balanceOf[owner] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[owner] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[owner]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier owner
               Type: address
               Source: "owner"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "kill" - public
     Source: "function kill() { if (msg.sender == owner) selfdestruct(owner); }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{ if (msg.sender == owner) selfdestruct(owner); }"
      IfStatement
         Source: "if (msg.sender == owner) selfdestruct(owner)"
        BinaryOperation using operator ==
           Type: bool
           Source: "msg.sender == owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        ExpressionStatement
           Source: "selfdestruct(owner)"
          FunctionCall
             Type: tuple()
             Source: "selfdestruct(owner)"
            Identifier selfdestruct
               Type: function (address)
               Source: "selfdestruct"
            Identifier owner
               Type: address
               Source: "owner"
